{"pageProps":{"postData":{"id":"01-03-code-as-glass-onion","contentHtml":"<blockquote>\n<p>\"I like the glass onion, as a metaphor. An object that seems densely layered, but in reality, the centre is in plain sight.\"</p>\n</blockquote>\n<ul>\n<li>Benoit Blanc, The Glass Onion 2022</li>\n</ul>\n<p>One of the most important concepts in code is picking the right abstraction.\nTest first development from a user behavior perspective helps us get to the\nright abstraction sooner.</p>\n<p>Over time, the API surface area of any abstraction may increase, purpose can\nshift, and we can go from transparency, to muddy.</p>\n<p>Keeping the glass onion in mind is helpful to remember that while we strive to\nmake abstractions to gain efficiencies in maintenance, reliability, and accurage\nrepresentation of the domain model, we must also ensure that these benefits are\nnot overshadowed by obfuscation.</p>\n<p>A good glass onion codebase lets engineers \"see through\" the abstraction to\nquickly understand what's happening underneith without having to dig through\nobscure tangles of code.</p>\n<p>Good typing, good naming, good file structure, and frequent refactoring to fit a\nubiquitous language and domain model are all great for creating a glass onion\ncodebase.</p>","title":"Glass Onion Codebase","date":"2023-01-03"}},"__N_SSG":true}