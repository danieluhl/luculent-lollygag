{"pageProps":{"postData":{"id":"04-29-file-search-tool","contentHtml":"<h1>File Search Tool</h1>\n<p>I ran into a deep babel issue where file output was a problem under a specific set of circumstances: the module was AMD and it included a class that extends <code>React.Component</code>. I didn't know how pervasive the problem was in the codebase I was working in which a quick</p>\n<p><code>find . -type f | wc -l</code></p>\n<p>told me there was 42247 files.</p>\n<p>So what I needed was to grep through all the files looking for a set of specific terms</p>\n<pre><code>['Component {', 'define(', 'class', 'React']\n</code></pre>\n<p>This may not be fool proof but would pretty much get me what I want. After a few minutes of poking around, I figured I'd either need to write an extremely complex perl regex, or a full bash script. As I'm not great at either of these and I was running short on time I decided to give a shot throwing together a node script instead. And I was very pleased with how quickly I could get up a result!</p>\n<p>Here's exactly what I did:</p>\n<pre><code class=\"language-sh\">mkcd search-terms-tool\n</code></pre>\n<p>mkcd is my alias to make a directory and go into it immediately: <code>mkcd () { mkdir \"$1\" &#x26;&#x26; cd $_ }</code></p>\n<pre><code class=\"language-sh\">yarn init\nyarn add fast-glob\n</code></pre>\n<p>We'll need fast-glob to find all the file paths easily. Optionally you can add <code>yargs</code> to read the path to search from the command line. I was under time pressure so I just put it in the code directly.</p>\n<pre><code class=\"language-sh\">touch index.js\n</code></pre>\n<p>Open your editor of choice. Mine is vscode. Like I said above, first we need to get all the JS files in the directory:</p>\n<pre><code class=\"language-javascript\">const fg = require('fast-glob');\n\nconst SEARCH_DIR = '/path/to/code';\nconst paths = fg.sync(`${SEARCH_DIR}/**/*.js`);\n\nconsole.log(paths);\n</code></pre>\n<p>Then run the code or fire up <code>nodemon</code> if you want things to auto run:</p>\n<pre><code class=\"language-sh\">node index.js\n</code></pre>\n<p>You should see a huge list of files! This was basically one line of running code and we're half way there. Now we just need to filter by those containing all the search terms. The easiest way I could think of is to read the contents of each file using nodes build-in <code>fs</code>, then <code>.filter</code> by looking at <code>.every</code> search term:</p>\n<pre><code class=\"language-javascript\">const fs = require('fs');\nconst fg = require('fast-glob');\n\nconst searchTerms = ['Component {', 'define(', 'class', 'React'];\n\nconst SEARCH_DIR = '/path/to/code';\nconst paths = fg.sync(`${SEARCH_DIR}/**/*.js`);\n\nconst validPaths = paths.filter(path => {\n  const contents = fs.readFileSync(path);\n  return searchTerms.every(term => {\n    return contents.includes(term);\n  });\n});\n\nconsole.log(validPaths);\n</code></pre>\n<p>And that's it! I was pretty floored by how quickly I could throw this together. And since I had some extra time, I decided to make two upgrades: run the file reads in parallel, and write the results to a file.</p>\n<p>Simple enough - build a list of promises and run <code>Promise.all</code> to get the filtered results:</p>\n<pre><code class=\"language-javascript\">const util = require('util');\n\nconst readFile = util.promisify(fs.readFile);\n\nconst readAndCheckFile = async (path) => {\n  const contents = await readFile(path);\n  return searchTerms.every(term => contents.includes(term));\n}\n\nconst printResults = validPaths =>\n  fs.writeFileSync('./results.txt', validPaths.join('\\n'));\n\nPromise.all(paths.filter(readAndCheckFile)).catch(console.log).then(printResults);\n</code></pre>\n<p>The initial run I didn't have the <code>.catch</code> on the last line and the program blew up ðŸ˜¬</p>\n<p>After adding the <code>.catch</code> I found a \"too many files open\" error. After a quick google search I found <code>graceful-fs</code> which waits if it encounters an error. After simply changing the import it worked! Here's the final program I went with:</p>\n<pre><code class=\"language-javascript\">const fs = require('graceful-fs');\nconst fg = require('fast-glob');\nconst util = require('util');\n\n// Convert fs.readFile into Promise version of same\nconst readFile = util.promisify(fs.readFile);\n\n// path to find files in (no trailing slash)\nconst SEARCH_DIR = '/path/to/code';\n\n// order these by what will filter the most to least\nconst searchTerms = ['Component {', 'define(', 'class', 'React'];\n\n// find all the paths to files to look in\nconst paths = fg.sync(`${SEARCH_DIR}/**/*.js`);\n\nconst readAndCheckFile = async path => {\n  const contents = await readFile(path);\n  // check if all the terms are in the file contents\n  return searchTerms.every(term => contents.includes(term));\n};\n\nconst printResults = validPaths =>\n  fs.writeFileSync('./results.txt', validPaths.join('\\n'));\n\nPromise.all(paths.filter(path => readAndCheckFile(path)))\n  .catch(err => console.log(err))\n  .then(printResults)\n  .then(() => console.log('SUCCESS!'));\n</code></pre>\n<p>For someone completely unfamiliar with node and the JS ecosystem this could have been a nightmare and they probably would have figured out the bash regex path. If you know that path PLEASE let me know! But I guess the lesson here is to not be afraid to use the tools you already know and love. This helped me avoid a rabbit hole and I got my fix out on time.</p>\n<p>Happy Coding!</p>","title":"File Search Tool","date":"2021-04-29"}},"__N_SSG":true}