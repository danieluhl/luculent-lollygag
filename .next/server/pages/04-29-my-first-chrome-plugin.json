{"pageProps":{"postData":{"id":"04-29-my-first-chrome-plugin","contentHtml":"<h1>My First Chrome Plugin</h1>\n<p>It was much faster than I thought it would be.</p>\n<h2>Generate the Project</h2>\n<p>I used <a href=\"https://yeoman.io/\">Yeoman</a> to generate the scaffolding. Make a project folder and run:</p>\n<pre><code>npm install -g yo generator-web-extension\nyo web-extension\n</code></pre>\n<p>Lots of options but I'd go with the minimum for now. One thing I did include was a button in the extension.</p>\n<p>Then go to your <a href=\"chrome://extensions/\">chrome extensions</a> and click \"Load Unpacked\". Find the <code>dist</code> directory that was generated and you should have your dev extension in chrome ready to go. Click the puzzle piece in the extensions area and pin your extension.</p>\n<p>Now we can fire up the watcher and start coding while getting a live refresh:</p>\n<pre><code>npm run dev chrome\n</code></pre>\n<h2>Code Structure</h2>\n<p>There's a little popup when you click the extension. Think of this as it's own separate web page. In fact, you can right-click the extension and \"inspect\" just like it's a web page. This is where you'll see any <code>console.log</code> for the extension bits.</p>\n<p>We'll be injecting a super simple timer onto the page. To do this the extension needs to send a message to the page.</p>\n<p>Go to <code>app/pages/popup.html</code> and add a button with class <code>timerButton</code>.</p>\n<p>Now look in <code>/app/scripts</code> and you'll see three files, two we'll be touching are:</p>\n<p><code>popup.js</code>: this is for code that runs inside the extension \"page\"</p>\n<p><code>contentscript.js</code>: this is for code that runs in the page the user is currently on</p>\n<p>So we need to send a message from <code>popup.js</code> to <code>contentscript.js</code> to trigger injection of a timer on the page.</p>\n<p><code>popup.js</code>:</p>\n<pre><code>document.querySelector('.timerButton').addEventListener('click', addTimer);\nfunction addTimer() {\n  browser.tabs\n    .query({\n      active: true,\n      currentWindow: true,\n    })\n    .then(tabs => {\n      browser.tabs\n        .sendMessage(tabs[0].id, {\n          timerMessage: `create`,\n        })\n        .then(response => {\n          console.log({response});\n        })\n        .catch(({message}) => console.error('error', message));\n    });\n}\n\n</code></pre>\n<p>Once we hit the page we'll do all the timer stuff including injecting some html on the page that has some hacky draggability:</p>\n<pre><code>const SECOND = 1000;\nconst MINUTE = SECOND * 60;\nclass Timer {\n  timerHtmlHandle;\n  timerInterval;\n  originalTime;\n  currentTime;\n  startTimer() {\n    this.timerInterval = setInterval(this.tick.bind(this), SECOND);\n  }\n  stopTimer() {\n    clearInterval(this.timerInterval);\n    this.timerInterval = null;\n  }\n  toggleTimer() {\n    this.timerInterval ? this.stopTimer() : this.startTimer();\n  }\n  resetTimer(seedTime = prompt('Enter Timer Minutes') * MINUTE) {\n    this.stopTimer();\n    this.currentTime = this.originalTime = seedTime;\n    this.tick();\n  }\n  refreshTimer() {\n    this.stopTimer();\n    this.currentTime = this.originalTime;\n    this.tick();\n  }\n  addMinute() {\n    this.currentTime = this.currentTime + MINUTE;\n    this.tick();\n  }\n  tick() {\n    const timerText = `${Math.floor(this.currentTime / MINUTE)}:${`${\n      (this.currentTime % MINUTE) / SECOND\n    }`.padStart(2, '0')}`;\n\n    this.timerHtmlHandle.innerText = timerText;\n    this.currentTime = this.currentTime - SECOND;\n\n    if (this.currentTime &#x3C; 0) {\n      this.stopTimer();\n    } else if (this.currentTime &#x3C; MINUTE * 2) {\n      // two minute warning\n      this.timerHtmlHandle.style.color = '#f5b20a';\n    } else if (this.currentTime &#x3C; MINUTE) {\n      // one minute warning\n      this.timerHtmlHandle.style.color = '#da521f';\n    }\n  }\n}\nconst duhlTimer = new Timer();\n\nconst addTimer = () => {\n  const timerHtml = `\n    &#x3C;div draggable=\"true\" class=\"duhl-timer\">\n      &#x3C;div class=\"drag\">&#x3C;/div>\n      &#x3C;div class=\"ext-timer\">0:00&#x3C;/div>\n      &#x3C;button class=\"refreshTimer\">🔂&#x3C;/button>\n      &#x3C;button class=\"addMinute\">1️⃣&#x3C;/button>\n      &#x3C;button class=\"resetTimer\">🆕&#x3C;/button>\n      &#x3C;button class=\"toggleTimer\">⏯&#x3C;/button>\n    &#x3C;/div>\n  `;\n  document.body.insertAdjacentHTML('afterbegin', timerHtml);\n  duhlTimer.timerHtmlHandle = document.querySelector('.ext-timer');\n  document\n    .querySelector('.duhl-timer .refreshTimer')\n    .addEventListener('click', () => duhlTimer.refreshTimer());\n  document\n    .querySelector('.duhl-timer .addMinute')\n    .addEventListener('click', () => duhlTimer.addMinute());\n  document\n    .querySelector('.duhl-timer .resetTimer')\n    .addEventListener('click', () => duhlTimer.resetTimer());\n  document\n    .querySelector('.duhl-timer .toggleTimer')\n    .addEventListener('click', () => duhlTimer.toggleTimer());\n  document.querySelector('.duhl-timer').addEventListener('dragend', e => {\n    console.log(e);\n    e.target.style.top = `${e.pageY}px`;\n    e.target.style.left = `${e.pageX}px`;\n  });\n};\n\nbrowser.runtime.onMessage.addListener((req, sender, sendResponse) => {\n  // only one timer for you!\n  if (duhlTimer &#x26;&#x26; duhlTimer.timerHtmlHandle) {\n    return;\n  }\n  addTimer();\n  // reflow before starting things or it gets wonky\n  setTimeout(() => {\n    duhlTimer.resetTimer(5 * MINUTE);\n  });\n});\n\n</code></pre>\n<p>Finally the related <code>contentscript.css</code></p>\n<pre><code>.duhl-timer {\n  padding: 0 4px;\n  position: absolute;\n  z-index: 10000000;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.8);\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);\n  border: 1px solid #fff;\n  border-radius: 12px;\n  color: #fff;\n}\n\n.duhl-timer .drag {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 16px;\n  height: 16px;\n  border-radius: 12px 0 2px 0;\n  background: repeating-linear-gradient(\n    to bottom,\n    #666,\n    #666 2px,\n    #333 2px,\n    #333 4px\n  );\n  cursor: move;\n}\n\n.duhl-timer .ext-timer {\n  font-size: 3rem;\n  line-height: 3rem;\n  text-align: center;\n}\n\n.duhl-timer button {\n  padding: 2px 6px;\n  border: none;\n  background: none;\n  border-radius: 4px;\n}\n\n.duhl-timer button:hover {\n  cursor: pointer;\n  background: rgba(255, 255, 255, 0.1);\n}\n.duhl-timer button:active {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n</code></pre>\n<p>And that's my timer injection plugin!</p>\n<p>[src](<a href=\"https://github.com/danieluhl/timer-chrome-\">https://github.com/danieluhl/timer-chrome-</a></p>","title":"My First Chrome Plugin","date":"2021-04-29"}},"__N_SSG":true}